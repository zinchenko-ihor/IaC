pipeline {
  agent any
  
  environment {
    REGISTRY_CREDENTIALS = credentials('docker-hub-credentials')
  }
  
  stages {
    stage('Clone repository') {
      steps {
        checkout scm
      }
    }
    
    stage('Build Docker image') {
      steps {
        script {
          app = docker.build("jumper93/hellonode")
        }
      }
    }
    
    stage('Test Docker image') {
      steps {
        script {
          app.inside {
            sh 'echo "Tests passed"'
          }
        }
      }
    }
    
    stage('Push Docker image') {
      steps {
        script {
          try {
            docker.withRegistry('https://registry.hub.docker.com', REGISTRY_CREDENTIALS) {
              app.push("${env.BUILD_NUMBER}")
              app.push("latest")
            }
          } catch (Exception e) {
            // Handle errors here
          }
        }
      }
    }
    
    stage('Pull Git Repo') {
      steps {
        git branch: 'main', url: "https://github.com/zinchenko-ihor/IaC.git"
      }
    }
    
    stage('Write Kubeconfig to file') {
      steps {
        script {
          kubeconfig_file = writeKubeconfigToFile(kubeconfig)
        }
      }
    }
    
    stage('Deploy to K8s using Ansible') {
      steps {
        ansiblePlaybook credentialsId: 'private_key', disableHostKeyChecking: true, installation: 'Ansible', inventory: 'Ansible/hosts.txt', playbook: 'Ansible/playbook.yml', extraVars: [
          kubeconfig: "${kubeconfig_file.path}"
        ]
      }
    }
  }
}

def writeKubeconfigToFile(kubeconfig) {
  def tempKubeconfigFile = File.createTempFile("kubeconfig", ".yaml")
  tempKubeconfigFile.write(kubeconfig)
  return tempKubeconfigFile
}
